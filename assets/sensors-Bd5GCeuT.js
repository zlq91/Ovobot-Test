import{G as b,$ as t,I as de,F as r,a9 as O,s as L,H as _e,a1 as ue,M as w,X as D,g as W,T as ge}from"./DarkTheme-BPZSaX8v.js";import{l as X,a as j,b as J,c as fe,s as pe}from"./transform-Ds3J3XDC.js";import{D as K}from"./debug-Bpo52Ap0.js";import{e as he}from"./extent-DA9eJQRT.js";function me(y,P){let u;for(const _ of y)_!=null&&(u<_||u===void 0&&_>=_)&&(u=_);return u}const f={};f.initialize=function(y){b.active_tab!="sensors"&&(b.active_tab="sensors");function P(){for(let e=0;e<3;e++)r.SENSOR_DATA.accelerometer[e]=0,r.SENSOR_DATA.gyroscope[e]=0,r.SENSOR_DATA.magnetometer[e]=0,r.SENSOR_DATA.sonar=0,r.SENSOR_DATA.altitude=0;for(let e=0;e<f.debugColumns;e++)r.SENSOR_DATA.debug[e]=0}function u(e){const n=new Array(e);for(let o=0;o<e;o++)n[o]=new Array,n[o].min=-1,n[o].max=1;return n}function _(e,n,o){for(let s=0;s<e.length;s++){const i=o[s];e[s].push([n,i]),i<e[s].min&&(e[s].min=i),i>e[s].max&&(e[s].max=i)}for(;e[0].length>300;)for(let s=0;s<e.length;s++)e[s].shift();return n+1}const E={top:20,right:10,bottom:10,left:40};function S(e){e.width=e.targetElement.width()-E.left-E.right,e.height=e.targetElement.height()-E.top-E.bottom,e.widthScale.range([0,e.width]),e.heightScale.range([e.height,0]),e.xGrid.tickSize(-e.height,0,0),e.yGrid.tickSize(-e.width,0,0)}function p(e,n,o){const s={selector:e,targetElement:t(e),dynamicHeightDomain:!o};return s.widthScale=X().clamp(!0).domain([n-299,n]),s.heightScale=X().clamp(!0).domain(o||[1,-1]),s.xGrid=j(),s.yGrid=J(),S(s),s.xGrid.scale(s.widthScale).ticks(5).tickFormat(""),s.yGrid.scale(s.heightScale).ticks(5).tickFormat(""),s.xAxis=j().scale(s.widthScale).ticks(5).tickFormat(function(i){return i}),s.yAxis=J().scale(s.heightScale).ticks(5).tickFormat(function(i){return i}),s.line=fe().x(function(i){return s.widthScale(i[0])}).y(function(i){return s.heightScale(i[1])}),s}function v(e,n,o){const s=pe(e.selector);if(e.dynamicHeightDomain){const h=[];t.each(n,function(A,N){h.push(N.min),h.push(N.max)}),e.heightScale.domain(he(h))}e.widthScale.domain([o-299,o]),s.select(".x.grid").call(e.xGrid),s.select(".y.grid").call(e.yGrid),s.select(".x.axis").call(e.xAxis),s.select(".y.axis").call(e.yAxis);const x=s.select("g.data").selectAll("path").data(n,function(h,A){return A});x.enter().append("path").attr("class","line"),x.attr("d",e.line)}function Q(e){e?t(".wrapper.gyro").show():t(".wrapper.gyro").hide()}function Y(e){e?t(".wrapper.accel").show():t(".wrapper.accel").hide()}function Z(e){e?t(".wrapper.mag").show():t(".wrapper.mag").hide()}function ee(e){e?t(".wrapper.altitude").show():t(".wrapper.altitude").hide()}function te(e){e?t(".wrapper.sonar").show():t(".wrapper.sonar").hide()}function se(e){e?t(".wrapper.debug").show():t(".wrapper.debug").hide()}function ae(){const e=K.modes[r.PID_ADVANCED_CONFIG.debugMode],n=K.fieldNames[e];for(let o=0;o<f.debugColumns;o++){let s=`Debug ${o} unknown`;n&&(s=n[`debug[${o}]`]??`Debug ${o} not used`),t(`.plot_control.debug${o}`).children(".title").text(s)}}t("#content").load("./tabs/sensors.html",function(){de.localizePage();let n=t(".tab-sensors .info .checkboxes input");if(n.parent().show(),r.CONFIG.boardType==0||r.CONFIG.boardType==2)O(r.CONFIG.activeSensors,"acc")||n.eq(1).prop("disabled",!0),O(r.CONFIG.activeSensors,"mag")||n.eq(2).prop("disabled",!0),O(r.CONFIG.activeSensors,"baro")||O(r.CONFIG.activeSensors,"gps")||n.eq(3).prop("disabled",!0),O(r.CONFIG.activeSensors,"sonar")||n.eq(4).prop("disabled",!0);else for(let a=0;a<=4;a++)n.eq(a).prop("disabled",!0),n.eq(a).parent().hide();if(t(".tab-sensors .info .checkboxes input").change(function(){const a=t(this).prop("checked");switch(t(this).parent().index()){case 0:Q(a);break;case 1:Y(a);break;case 2:Z(a);break;case 3:ee(a);break;case 4:te(a);break;case 5:se(a);break}const m=[];t(".tab-sensors .info .checkboxes input").each(function(){m.push(t(this).prop("checked"))}),t(".tab-sensors .rate select:first").change(),L({graphs_enabled:m})}),_e.gte(r.CONFIG.apiVersion,ue))f.debugColumns=8,w.send_message(D.MSP_ADVANCED_CONFIG,!1,!1,ae);else{f.debugColumns=4;for(let a=4;a<8;a++)t(`svg#debug${a}`).hide(),t(`div.plot_control.debug${a}`).hide()}P();let o=0,s=0,i=0,x=0,h=0,A=0;const N=u(3),$=u(3),z=u(3),q=u(1),U=u(1),T=[];for(let a=0;a<f.debugColumns;a++)T.push(u(1));let k=p("#gyro",o,[-2e3,2e3]),F=p("#accel",s,[-2,2]),C=p("#mag",i,[-1,1]);const B=p("#altitude",x),V=p("#sonar",h),R=[];for(let a=0;a<f.debugColumns;a++)R.push(p(`#debug${a}`,A));const c={x:[],y:[],z:[]};t(".plot_control .x, .plot_control .y, .plot_control .z").each(function(){const a=t(this);a.hasClass("x")?c.x.push(a):a.hasClass("y")?c.y.push(a):c.z.push(a)}),t(".tab-sensors .rate select, .tab-sensors .scale select").change(function(){const a={gyro:parseInt(t('.tab-sensors select[name="gyro_refresh_rate"]').val(),10),accel:parseInt(t('.tab-sensors select[name="accel_refresh_rate"]').val(),10),mag:parseInt(t('.tab-sensors select[name="mag_refresh_rate"]').val(),10),altitude:parseInt(t('.tab-sensors select[name="altitude_refresh_rate"]').val(),10),sonar:parseInt(t('.tab-sensors select[name="sonar_refresh_rate"]').val(),10),debug:parseInt(t('.tab-sensors select[name="debug_refresh_rate"]').val(),10)},d={gyro:parseFloat(t('.tab-sensors select[name="gyro_scale"]').val()),accel:parseFloat(t('.tab-sensors select[name="accel_scale"]').val()),mag:parseInt(t('.tab-sensors select[name="mag_scale"]').val(),10)};let m;["gyro_refresh_rate","accel_refresh_rate","mag_refresh_rate"].includes(t(this).attr("name"))?(m=t(this).val(),t('.tab-sensors select[name="gyro_refresh_rate"]').val(m),t('.tab-sensors select[name="accel_refresh_rate"]').val(m),t('.tab-sensors select[name="mag_refresh_rate"]').val(m)):m=me([a.gyro,a.accel,a.mag]),L({sensor_settings:{rates:a,scales:d}}),k=p("#gyro",o,[-d.gyro,d.gyro]),F=p("#accel",s,[-d.accel,d.accel]),C=p("#mag",i,[-d.mag,d.mag]),n=[],t(".tab-sensors .info .checkboxes input").each(function(){n.push(t(this).prop("checked"))}),b.interval_kill_all(["status_pull"]),(n[0]||n[1]||n[2])&&b.interval_add("IMU_pull",function(){w.send_message(D.MSP_RAW_IMU,!1,!1,ne)},m,!0),n[3]&&b.interval_add("altitude_pull",function(){w.send_message(D.MSP_ALTITUDE,!1,!1,re)},a.altitude,!0),n[4]&&b.interval_add("sonar_pull",function(){w.send_message(D.MSP_SONAR,!1,!1,oe)},a.sonar,!0),n[5]&&b.interval_add("debug_pull",function(){w.send_message(D.MSP_DEBUG,!1,!1,ie)},a.debug,!0);function ne(){if(n[0]&&(S(k),o=_(N,o,r.SENSOR_DATA.gyroscope),v(k,N,o),c.x[0].text(r.SENSOR_DATA.gyroscope[0].toFixed(2)),c.y[0].text(r.SENSOR_DATA.gyroscope[1].toFixed(2)),c.z[0].text(r.SENSOR_DATA.gyroscope[2].toFixed(2))),n[1]){S(F),s=_($,s,r.SENSOR_DATA.accelerometer),v(F,$,s);const l=r.SENSOR_DATA.accelerometer[0].toFixed(2),I=r.SENSOR_DATA.accelerometer[1].toFixed(2),M=r.SENSOR_DATA.accelerometer[2].toFixed(2),H=Math.PI,le=Math.round(Math.atan(I/(Math.sqrt(Math.pow(l,2))+Math.pow(M,2)))*(180/H)),ce=Math.round(Math.atan(l/(Math.sqrt(Math.pow(I,2))+Math.pow(M,2)))*(180/H));c.x[1].text(`${l} (${le})`),c.y[1].text(`${I} (${ce})`),c.z[1].text(`${M}`)}n[2]&&(S(C),i=_(z,i,r.SENSOR_DATA.magnetometer),v(C,z,i),c.x[2].text(r.SENSOR_DATA.magnetometer[0].toFixed(0)),c.y[2].text(r.SENSOR_DATA.magnetometer[1].toFixed(0)),c.z[2].text(r.SENSOR_DATA.magnetometer[2].toFixed(0)))}function re(){S(B),x=_(q,x,[r.SENSOR_DATA.altitude]),v(B,q,x),c.x[3].text(r.SENSOR_DATA.altitude.toFixed(2))}function oe(){S(V),h=_(U,h,[r.SENSOR_DATA.sonar]),v(V,U,h),c.x[4].text(r.SENSOR_DATA.sonar.toFixed(2))}function ie(){for(let l=0;l<f.debugColumns;l++)S(R[l]),_(T[l],A,[r.SENSOR_DATA.debug[l]]),v(R[l],T[l],A),c.x[5+l].text(r.SENSOR_DATA.debug[l]);A++}});const g=W("sensor_settings");g.sensor_settings?(t('.tab-sensors select[name="gyro_refresh_rate"]').val(g.sensor_settings.rates.gyro),t('.tab-sensors select[name="gyro_scale"]').val(g.sensor_settings.scales.gyro),t('.tab-sensors select[name="accel_refresh_rate"]').val(g.sensor_settings.rates.accel),t('.tab-sensors select[name="accel_scale"]').val(g.sensor_settings.scales.accel),t('.tab-sensors select[name="mag_refresh_rate"]').val(g.sensor_settings.rates.mag),t('.tab-sensors select[name="mag_scale"]').val(g.sensor_settings.scales.mag),t('.tab-sensors select[name="altitude_refresh_rate"]').val(g.sensor_settings.rates.altitude),t('.tab-sensors select[name="sonar_refresh_rate"]').val(g.sensor_settings.rates.sonar),t('.tab-sensors select[name="debug_refresh_rate"]').val(g.sensor_settings.rates.debug),t(".tab-sensors .rate select:first").change()):t(".tab-sensors .rate select:first").change();const G=W("graphs_enabled");if(G.graphs_enabled){const a=t(".tab-sensors .info .checkboxes input");for(let d=0;d<G.graphs_enabled.length;d++)a.eq(d).not(":disabled").prop("checked",G.graphs_enabled[d]).change()}else t(".tab-sensors .info input:lt(4):not(:disabled)").prop("checked",!0).change();b.interval_add("status_pull",function(){w.send_message(D.MSP_STATUS)},250,!0),b.content_ready(y)})};f.cleanup=function(y){y&&y()};ge.sensors=f;export{f as sensors};
